// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var _ref;

  if ((_ref = window.globals) == null) {
    window.globals = {};
  }

  /*
  Ajax call to save the vis with the given title and description.
  Calls the appropriate callback upon completetion. A failed attempt
  will pass the callback an error string, a success will pass the callback
  a string with the new VID.
  */


  globals.saveVis = function(title, desc, succCallback, failCallback) {
    var req, savedData;
    savedData = globals.serializeVis();
    return req = $.ajax({
      type: 'POST',
      url: "/actions/highvis.php",
      data: {
        action: "save",
        experiment_id: Number(data.experimentID),
        title: title,
        description: desc,
        data: savedData.data,
        globals: savedData.globals
      },
      success: function(msg) {
        if (!isNaN(Number(msg))) {
          return succCallback(msg);
        } else {
          return failCallback(msg);
        }
      }
    });
  };

  /*
  Ajax call to check if the user is logged in. Calls the appropriate
  given callback when completed.
  */


  globals.verifyUser = function(succCallback, failCallback) {
    var req;
    return req = $.ajax({
      type: 'GET',
      url: "/actions/users.php",
      data: {
        action: "verify"
      },
      success: function(data) {
        if ((Number(data)) === 1) {
          return succCallback(data);
        } else {
          return failCallback(data);
        }
      }
    });
  };

  /*
  Creates a saved vis dialog form. If the user finishes creating the new saved vis, the dialog will close
  and the page will be re-directed to the new saved vis.
  */


  globals.savedVisDialog = function() {
    var formText;
    formText = "<div id=\"dialog-form\" title=\"Save Visualization\">\n\n    <form>\n    <fieldset>\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" size=\"45 maxlength=\"64\" name=\"title\" id=\"savedVisTitle\" class=\"text ui-widget-content ui-corner-all\" /> <br> <span id=\"titleHint\" class=\"hint\"> </span> <br>\n        \n        <label for=\"desc\">Description:</label> <br>\n        <textarea type=\"text\" name=\"desc\" maxlength=\"512\" rows=\"10\" cols=\"50\" id=\"savedVisDesc\" class=\"text ui-widget-content ui-corner-all\" />\n        <br>\n    </fieldset>\n    </form>\n</div>";
    ($("#container")).append(formText);
    return ($("#dialog-form")).dialog({
      resizable: false,
      draggable: false,
      autoOpen: true,
      height: 'auto',
      width: 'auto',
      modal: true,
      open: function() {
        return ($("#dialog-form form")).submit(function(evt) {
          ($("#dialog-form")).parent().find('button').trigger("click");
          return false;
        });
      },
      buttons: {
        Save: function() {
          var valid, _ref1;
          valid = true;
          ($('#dialog-form input')).removeClass('ui-state-error');
          ($('#dialog-form .hint')).text('');
          if (!((0 < (_ref1 = ($('#savedVisTitle')).val().length) && _ref1 <= 64))) {
            ($('#savedVisTitle')).addClass('ui-state-error');
            ($('#titleHint')).text('Title cannot be ommitted.');
            ($('#titleHint')).addClass('ui-state-highlight');
            setTimeout((function() {
              return ($('#titleHint')).removeClass('ui-state-highlight', 1500);
            }), 500);
            valid = false;
          }
          if (valid) {
            return globals.saveVis(($('#savedVisTitle')).val(), ($('#savedVisDesc')).val(), (function(v) {
              window.location = "../highvis.php?vid=" + v;
              return ($("#dialog-form")).dialog('close');
            }), (function(v) {
              return alert('Error:' + v);
            }));
          }
        }
      },
      close: function() {
        return ($('#dialog-form')).remove();
      }
    });
  };

  /*
  Serializes all vis data. Strips functions from the objects bfire serializing
  since they cannot be serialized.
  
  NOTE: Booleans cannot be serialized properly (Hydrate.js issue)
  */


  globals.serializeVis = function() {
    var dataCpy, globalsCpy, hydrate, ret, stripFunctions, vis, visName, _i, _len, _ref1;
    hydrate = new Hydrate();
    stripFunctions = function(obj) {
      var cpy, key, stripped, val;
      switch (typeof obj) {
        case 'number':
          return obj;
        case 'string':
          return obj;
        case 'function':
          return void 0;
        case 'object':
          if (obj === null) {
            return null;
          } else {
            cpy = $.isArray(obj) ? [] : {};
            for (key in obj) {
              val = obj[key];
              stripped = stripFunctions(val);
              if (stripped !== void 0) {
                cpy[key] = stripped;
              }
            }
            return cpy;
          }
      }
    };
    _ref1 = data.allVis;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      visName = _ref1[_i];
      vis = eval("globals." + (visName.toLowerCase()));
      vis.serializationCleanup();
    }
    globalsCpy = stripFunctions(globals);
    dataCpy = stripFunctions(data);
    globals.curVis.end();
    globals.curVis.start();
    delete globalsCpy.curVis;
    return ret = {
      globals: hydrate.stringify(globalsCpy),
      data: hydrate.stringify(dataCpy)
    };
  };

  /*
  Does a deep copy extend operation similar to $.extend
  */


  globals.extendObject = function(obj1, obj2) {
    var key, val;
    switch (typeof obj2) {
      case 'boolean':
        return obj2;
      case 'number':
        return obj2;
      case 'string':
        return obj2;
      case 'function':
        return obj2;
      case 'object':
        if (obj2 === null) {
          return obj2;
        } else {
          if ($.isArray(obj2)) {
            if (obj1 == null) {
              obj1 = [];
            }
          } else {
            if (obj1 == null) {
              obj1 = {};
            }
          }
          for (key in obj2) {
            val = obj2[key];
            if (key !== '__hydrate_id') {
              obj1[key] = globals.extendObject(obj1[key], obj2[key]);
            }
          }
          return obj1;
        }
    }
  };

}).call(this);
