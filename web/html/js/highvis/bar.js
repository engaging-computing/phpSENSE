// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Bar = (function(_super) {

    __extends(Bar, _super);

    function Bar(canvas) {
      this.canvas = canvas;
    }

    Bar.prototype.analysisType = "Max";

    Bar.prototype.buildOptions = function() {
      Bar.__super__.buildOptions.call(this);
      this.chartOptions;
      return $.extend(true, this.chartOptions, {
        chart: {
          type: "column"
        },
        title: {
          text: "Bar"
        },
        legend: {
          symbolWidth: 0
        }
        /*
                    xAxis:
                        categories:
                            for fieldIndex in data.normalFields when (fieldIndex in globals.fieldSelection)
                                data.fields[fieldIndex].fieldName
                
                    #if (groupIndex in globals.groupSelection) and (fieldIndex in globals.fieldSelection)
                
                    for fieldIndex, categoryIndex in data.normalFields
                        for groupName, groupIndex in data.groups when ((groupIndex in globals.groupSelection) and (fieldIndex in globals.fieldSelection))
                            options =
                                data: [
                                    x: categoryIndex
                                    y: data.getMax fieldIndex, groupIndex
                                    ]
                                showInLegend: false
                                color: globals.colors[groupIndex % globals.colors.length]
                                name: data.groups[groupIndex] + data.fields[fieldIndex].fieldName
                            @chartOptions.series.push options
        */

      });
    };

    Bar.prototype.update = function() {
      var fieldIndex, groupIndex, groupName, options, selection, visibleCategories, _i, _len, _ref;
      Bar.__super__.update.call(this);
      visibleCategories = (function() {
        var _i, _len, _ref, _results;
        _ref = globals.fieldSelection;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          selection = _ref[_i];
          _results.push(data.fields[selection].fieldName);
        }
        return _results;
      })();
      this.chart.xAxis[0].setCategories(visibleCategories, false);
      while (this.chart.series.length > data.normalFields.length) {
        this.chart.series[this.chart.series.length - 1].remove(false);
      }
      /*
              categoryIndex = -1
              for fieldIndex in data.normalFields when fieldIndex in globals.fieldSelection
                  categoryIndex += 1
                  
                  for groupName, groupIndex in data.groups when groupIndex in globals.groupSelection
                      options =
                          data: [
                              x: categoryIndex
                              y: data.getMax fieldIndex, groupIndex
                              ]
                          showInLegend: false
                          color: globals.colors[groupIndex % globals.colors.length]
                          name: data.groups[groupIndex] + data.fields[fieldIndex].fieldName
                          
                      @chart.addSeries options, false
      */

      _ref = data.groups;
      for (groupIndex = _i = 0, _len = _ref.length; _i < _len; groupIndex = ++_i) {
        groupName = _ref[groupIndex];
        if (!(__indexOf.call(globals.groupSelection, groupIndex) >= 0)) {
          continue;
        }
        options = {
          showInLegend: false,
          color: globals.colors[groupIndex % globals.colors.length],
          name: data.groups[groupIndex]
        };
        options.data = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = data.normalFields;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            fieldIndex = _ref1[_j];
            if (__indexOf.call(globals.fieldSelection, fieldIndex) >= 0) {
              _results.push(data.getMax(fieldIndex, groupIndex));
            }
          }
          return _results;
        })();
        this.chart.addSeries(options, false);
      }
      return this.chart.redraw();
    };

    Bar.prototype.buildLegendSeries = function() {
      var count, dummy, field, fieldIndex, _i, _len, _ref, _results;
      count = -1;
      _ref = data.fields;
      _results = [];
      for (fieldIndex = _i = 0, _len = _ref.length; _i < _len; fieldIndex = ++_i) {
        field = _ref[fieldIndex];
        if (!(__indexOf.call(data.normalFields, fieldIndex) >= 0)) {
          continue;
        }
        count += 1;
        _results.push(dummy = {
          data: [],
          color: '#000',
          visible: __indexOf.call(globals.fieldSelection, fieldIndex) >= 0 ? true : false,
          name: field.fieldName,
          type: 'area',
          xAxis: 1
        });
      }
      return _results;
    };

    Bar.prototype.drawAnalysisTypeControls = function() {
      var controls,
        _this = this;
      controls = '<div id="AnalysisTypeControl" class="vis_controls">';
      controls += '<table class="vis_control_table"><tr><td class="vis_control_table_title">Analysis Type:</td></tr>';
      controls += '<tr><td><div class="vis_control_table_div">';
      controls += '<input class="analysisType" type="radio" name="analysisTypeSelector" value="Max">Max</input><br>';
      controls += '<input class="analysisType" type="radio" name="analysisTypeSelector" value="Min">Min</input><br>';
      controls += '<input class="analysisType" type="radio" name="analysisTypeSelector" value="Mean">Mean</input><br>';
      controls += '</div></td></tr>';
      controls += '</table></div>';
      ($('#controldiv')).append(controls);
      return ($('#drawAnalysisTypeSelector')).change(function(e) {
        return _this.analysisType = e.target.value;
      });
    };

    Bar.prototype.drawControls = function() {
      this.drawGroupControls();
      return this.drawAnalysisTypeControls();
    };

    return Bar;

  })(BaseVis);

  globals.bar = new Bar('bar_canvas');

}).call(this);
