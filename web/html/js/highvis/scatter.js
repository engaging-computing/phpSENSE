// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Scatter = (function(_super) {

    __extends(Scatter, _super);

    function Scatter(canvas) {
      this.canvas = canvas;
    }

    Scatter.prototype.buildOptions = function() {
      var fieldIndex, groupIndex, options, symbolIndex, _results;
      Scatter.__super__.buildOptions.call(this);
      this.chartOptions;
      $.extend(true, this.chartOptions, {
        chart: {
          type: "line"
        },
        title: {
          text: "Scatter"
        }
      });
      _results = [];
      for (groupIndex in data.groups) {
        _results.push((function() {
          var _ref, _results1;
          _ref = data.normalFields;
          _results1 = [];
          for (symbolIndex in _ref) {
            fieldIndex = _ref[symbolIndex];
            options = {
              data: data.xySelector(globals.xAxis, fieldIndex, groupIndex),
              showInLegend: false,
              color: globals.colors[groupIndex % globals.colors.length],
              symbol: globals.symbols[symbolIndex % globals.symbols.length]
            };
            console.log([symbolIndex, fieldIndex]);
            _results1.push(this.chartOptions.series.push(options));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Scatter.prototype.drawControls = function() {
      this.drawGroupControls();
      return this.drawXAxisControls();
    };

    return Scatter;

  })(BaseVis);

  globals.scatter = new Scatter('scatter_canvas');

}).call(this);
