// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Histogram = (function(_super) {

    __extends(Histogram, _super);

    function Histogram(canvas) {
      this.canvas = canvas;
    }

    Histogram.prototype.binSize = 1;

    Histogram.prototype.displayField = data.normalFields[0];

    Histogram.prototype.buildOptions = function() {
      var self,
        _this = this;
      Histogram.__super__.buildOptions.call(this);
      self = this;
      this.chartOptions;
      return $.extend(true, this.chartOptions, {
        chart: {
          type: "column"
        },
        title: {
          text: "Histogram"
        },
        legend: {
          symbolWidth: 0
        },
        plotOptions: {
          column: {
            stacking: 'normal',
            groupPadding: 0,
            pointPadding: 0
          },
          series: {
            events: {
              legendItemClick: (function() {
                return function(event) {
                  self.displayField = this.options.legendIndex;
                  return self.delayedUpdate();
                };
              })()
            }
          }
        }
      });
    };

    Histogram.prototype.update = function() {
      var globalmax, globalmin, groupIndex, histogramdata, i, number, occurences, options, roundedmax, roundedmin, selecteddata, tempdata, tempdict, _i, _j, _k, _len, _len1, _ref, _ref1;
      Histogram.__super__.update.call(this);
      while (this.chart.series.length > data.normalFields.length) {
        this.chart.series[this.chart.series.length - 1].remove(false);
      }
      /* ---
      */

      globalmin = Number.MAX_VALUE;
      globalmax = Number.MIN_VALUE;
      _ref = globals.groupSelection;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        groupIndex = _ref[_i];
        selecteddata = data.selector(this.displayField, groupIndex);
        tempdata = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = selecteddata.length; _j < _len1; _j++) {
            i = selecteddata[_j];
            _results.push(Math.round(i / this.binSize) * this.binSize);
          }
          return _results;
        }).call(this);
        tempdict = {};
        roundedmin = Math.round((data.getMin(this.displayField, groupIndex)) / this.binSize) * this.binSize;
        roundedmax = Math.round((data.getMax(this.displayField, groupIndex)) / this.binSize) * this.binSize;
        globalmin = Math.min(globalmin, roundedmin);
        globalmax = Math.max(globalmax, roundedmax);
        for (i = _j = roundedmin, _ref1 = this.binSize; roundedmin <= roundedmax ? _j <= roundedmax : _j >= roundedmax; i = _j += _ref1) {
          tempdict[i] = 0;
        }
        for (_k = 0, _len1 = tempdata.length; _k < _len1; _k++) {
          i = tempdata[_k];
          tempdict[i]++;
        }
        tempdata = histogramdata = (function() {
          var _results;
          _results = [];
          for (number in tempdict) {
            occurences = tempdict[number];
            _results.push([Number(number), occurences]);
          }
          return _results;
        })();
        /* ---
        */

        options = {
          showInLegend: false,
          color: globals.colors[groupIndex % globals.colors.length],
          name: data.groups[groupIndex]
        };
        options.data = tempdata;
        this.chart.addSeries(options, false);
      }
      this.chart.xAxis[0].setExtremes(globalmin - (this.binSize / 2), globalmax + (this.binSize / 2), false);
      return this.chart.redraw();
    };

    Histogram.prototype.buildLegendSeries = function() {
      var count, dummy, field, fieldIndex, _i, _len, _ref, _results;
      count = -1;
      _ref = data.fields;
      _results = [];
      for (fieldIndex = _i = 0, _len = _ref.length; _i < _len; fieldIndex = ++_i) {
        field = _ref[fieldIndex];
        if (!(__indexOf.call(data.normalFields, fieldIndex) >= 0)) {
          continue;
        }
        count += 1;
        _results.push(dummy = {
          data: [],
          color: '#000',
          visible: this.displayField === fieldIndex,
          name: field.fieldName,
          type: 'area',
          xAxis: 1,
          legendIndex: fieldIndex
        });
      }
      return _results;
    };

    Histogram.prototype.drawToolControls = function() {
      var controls, _ref,
        _this = this;
      controls = "";
      controls += '<div id="toolControl" class="vis_controls">';
      controls += "<h3 class='clean_shrink'><a href='#'>Tools:</a></h3>";
      controls += "<div class='inner_control_div'>";
      controls += "Bin Size: <input id='binSizeInput' type='text' value='" + this.binSize + "' size='" + 4 + "'></input>";
      controls += '</div>';
      controls += '</div>';
      controls += '</div>';
      /*
              for typestring, type in @analysisTypeNames
              
                  controls += '<div class="inner_control_div">'
              
                  controls += "<input class='analysisType' type='radio' name='analysisTypeSelector' value='#{type}' #{if type is @analysisType then 'checked' else ''}> #{typestring}</input><br>"
              
                  controls += '</div>'
      */

      ($('#controldiv')).append(controls);
      /*
              ($ '.analysisType').change (e) =>
                  @analysisType = Number e.target.value
                  @delayedUpdate()
                  
              ($ '.sortField').change (e) =>
                  @sortField = Number e.target.value
                  @delayedUpdate()
      */

      if ((_ref = globals.toolsOpen) == null) {
        globals.toolsOpen = 0;
      }
      ($('#toolControl')).accordion({
        collapsible: true,
        active: globals.toolsOpen
      });
      ($('#toolControl > h3')).click(function() {
        return globals.toolsOpen = (globals.toolsOpen + 1) % 2;
      });
      return ($("#binSizeInput")).keydown(function() {
        if (event.keyCode === 13) {
          _this.binSize = Number(($('#binSizeInput')).val());
          return _this.update();
        }
      });
    };

    Histogram.prototype.drawControls = function() {
      Histogram.__super__.drawControls.call(this);
      this.drawGroupControls();
      return this.drawToolControls();
    };

    return Histogram;

  })(BaseHighVis);

  if (__indexOf.call(data.relVis, "Histogram") >= 0) {
    globals.histogram = new Histogram('histogram_canvas');
  } else {
    globals.histogram = new DisabledVis('histogram_canvas');
  }

}).call(this);
